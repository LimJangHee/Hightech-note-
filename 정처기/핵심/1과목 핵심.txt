GoF ,UML 모델, 애자일, CASE, 럼바우, 미들웨어

<애자일 개발 방법론>
익스트림 프로그래밍(XP , Extreme Programming) -> 구조적 방법론이랑 구분
스크럼크리스털 패밀리
기능 주도 개발(FDD , Feature-Driven Development)
적응형 소프트웨어 개발 (ASD , Adaptive Software Development(
익스트림 모델링


< GoF >
생성패턴 :
추상 팩토리(Abstract Factory)
빌더(Builder)
팩토리메서드(FactoryMethod)
프로토타입(Prototype)
싱글톤(Singleton)

구조패턴 :
어댑터(Adapter)
브리지(Bridge)
컴포지트(Composite)
데코레이터(Decorator)
파사드(Facade)
플라이웨이트(Flyweight)
프록시(Proxy)

행위 패턴 :
책임 연쇄(Chain of Responsibility)
커맨드(Command)
인터프리터(InterPreter)
이터레이터(Iterator)
중재자(Mediator)
메멘토(Memento)
옵서버(Observer)
상태(State)
전략(Strategy)
템플릿메서드(Template Method)
방문자(Visitor)

factory method pattern : 상위클래스에서 객체를 생성하는 인터페이스를 정의하고, 하위클래스에서 인스턴스를 생성하도록 하는 방식이다.
prototype pattern : prototype을 먼저 생성하고 인스턴스를 복제하여 사용하는 구조이다.
mediator pattern : 객체간의 통제와 지시의 역할을 하는 중재자를 두어 객체지향의 목표를 달성하게 해준다.
<bridge pattern> : 구현부에서 추상층을 분리하여 각자 독립적으로 확장이 가능하게 하는 패턴이다
Adapter pattern : 기존에 구현되어 있는 클래스에 기능 발생 시 기존 클래스를 재사용할 수 있도록 중간에서 맞춰주는 역할을 한다.



< 객체지향 분석 방법론 >
Coad-Yourdon : E-R 다이어그램을 사용하여 객체의 행위를 데이터 모델링하는데 초점을 둔 방법이다. -> 정보공학 방법론
럼바우 분석 기법 : 객체, 동적, 기능 모델로 나누어 수행하는 방법이다.
- 객 : 객체 다이어그램
- 동 : 상태 다이어그램
- 기 : 자료흐름도
Booch 방법 : 미시적 개발 프로세스와 거시적 개발 프로세스를 모두 사용하는 방법이다.
Jacobson 방법 : Use-Case를 강조하여 사용하는 방법이다.


< UML 다이어그램 > -> 액시디콜콤클, 객체지향
활동 다이어그램(Activity Diagram)
:시스템이 어떤 기능을 수행하는지 객체의 처리 로직이나 조건에 따른 처리의 흐름을 순서에 따라 표현한다.

상태 다이어그램(State Diagram)
:하나의 객체가 자신이 속한 클래스의 상태 변화 혹은 다른 객체와의 상호 작용에 따라 상태가 어떻게 변화하는지를 표현한다.

클래스 다이어그램(Class Diagram)
:클래스와 클래스가 가지는 속성, 클래스 사이의 관계를 표현한다.
시스템의 구조를 파악하고 구조상의 문제점을 도출할 수 있다.

package diagram
state transitino diagram
deployment diagram


Dependency(의존) : 한 사물의 명세서가 바뀌면 그것을 사용하는 다른 사물에게 영향을 끼치는 것을 말합니다 (Cascade 생각하셈)
Realization(실체화) : 한 객체가 다른 객체에 의해 오퍼레이션을 수행하도록 지정
Generalization(일반화) : 일반화된 사물과 좀 더 특수화된 사물 사이의 관계를 말합니다.('is-a')관계
Association(연관) : 두 사물간의 구조적 관계로, 어느 한 사물 객체가 다른 사물 객체와 연결되어 있음을 말함 ('has-a')관계라고도 합니다

정적구조: [ 클래스, 객체, 패키지, 컴포넌트, 복합구조, 배치]
동적구조: [ 유스케이스, 상태, 활동, 시퀀스, 통신, 상호작용, 타이밍]

< CASE >
* 원천 기술
- 구조적 기법, 프로토타이핑 기술, 자동프로그래밍 기술, 정보 저장소 기술, 분산 처리 기술

<요구 분석>

기능적 요구사항
- 시스템이 수행해야 하는 행위들을 구체화 한 것
- 시스템에서 제공해야 할 기능을 정의한 것
- 입력기능, 출력기능, 데이터베이스 기능, 통신 기능 등

비기능적 요구사항
- 시스템이 가져야 하는 기능 이외의 요구사항
- 시스템의 전체적인 품질이나 고려해야 하는 제약사항 등
- 사용 용이성, 효율성, 신뢰성, 이식성, 유연성, 확장성 등
- 성능적인 면: 응답 속도, 자원 사용량 등
- 보안 측면: 침입 대응, 침입 탐지, 사용자 인증, 권한 부여 등

요구 사항 정의 및 분석·설계의 결과물을 표현하기 위한 모델링 과정에서 사용되는 다이어그램(Diagram)
- Data Flow Diagram, UML Diagram, E-R Diagram


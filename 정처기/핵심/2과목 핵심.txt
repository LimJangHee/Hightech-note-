< 소프트웨어 품질 측정 >
정확성, 신뢰성, 효율성, 무결성, 유연성, 이식성, 사용성, 상호운용성
정신효무유이사상

<검증 도구 : xUnit, STAF, Fitnesse, NTAF, Selenium, watir>

<저작권 관리구성요소
- 콘텐츠 분배자, 패키저, 클리어링 하우스, DRM 컨트롤러 >

<반정규화>
테이블을 추가하는 방법 : 집중이부진
집계 테이블의 추가
중복 테이블의 추가
이력 테이블의 추가
부분 테이블의 추가
진행 테이블의 추가

< 소스코드 품질분석 도구 >
<정적>
pmd(Programmin Mistake Detector) : 결함 유발할 수 있는 코드 검사
cppcheck : 메모리 누수 오버플로우 등 분석
SonarQube : 중복 코드 복잡도 코딩 설계 등을 분석하는 소스 분석 통합 플랫폼
checkstyle : 자바 코드에 대해 소스코드 표준을 따르고 있는지 검사
ccm : 다양한 언어의 코드 복잡도를 분석
cobertura : 자바 언어의 소스코드 복잡도 분석 및 테스트 커버리지 측정

<동적>
Avalanche : 프로그램 결함 및 취약점 분석
valgrind : 프로그램 내에 존재하는 메모리 및 쓰레드 결함 분석


< White Box Testing, Black Box Testing >
< White Box Testing >
- 기본 경로는 싸이클을 최대 한번만 지나야한다
- Source Code 의 모든 문장을 한번 이상 수행함으로서 진행된다.
- 모듈 안의 작동을 직접 관찰 할 수 있다.
- 산출물의 각 기능별로 적절한 프로그램의 제어구조에 따라 선택, 반복 등의 부분들을 수행함으로써 논리적 경로를 점검한다.
- Condition Testing(조건 검사), Loop Testing(루프 검사), Data Flow Testing(데이터 흐름검사), 기초경로 검사

< Black Box Testing >
- 내부 구조나 작동 원리를 모르는 상태에서 입력에 따른 출력 결과를 테스트
- Equivalence Partitioning Testing(동치(동등) 분할 검사), Boundary Value Testing(경계값 분석), Cause-Effect Graphing Testing (원인-효과 그래프 검사), Error Guessing(오류 예측 검사), Comparison Testing(비교 검사)


< 디지털 저작권 관리(DRM) 기술 요소 >
- 암호화(Encryption) : 콘텐츠 및 라이선스를 암호화하고 전자 서명을 할 수 있는 기술
- 키 관리(Key Management) : 콘텐츠를 암호화한 키에 대한 저장 및 분배 기술
- 암호화 파일 생성(Packager) : 콘텐트를 암호화된 콘텐츠로 생성하기 위한 기술
- 식별 기술(Identification) : 콘텐츠에 대한 식별 체계 표현 기술
- 저작권 표현(Right Expression) : 라이선스의 내용 표현 기술
- 정책 관리(Policy Management) : 라이선스 발급 및 사용에 대한 정책 표현 및 관리 기술
- 크랙 방지(Tamper Resistance) : 크랙에 의한 콘텐츠 사용 방지 기술
- 인증(Authentication) : 라이선스 발급 및 사용의 기준이 되는 사용자 인증 기술


<인스펙션 과정>
계획 -> 사전교육 -> 준비 -> 인스펙션 회의 -> 수정 -> 후속조치



<필요 데이터를 인자를 통해 넘겨주고>, 
테스트 완료 후 그 결과값을 받는 역할을 하는 가상의 모듈을 테스트 드라이버(test driver)라고 한다.
테스트 스텁(test stub)은 <인자를 통해 받은 값>을 가지고 수행한 후 그 결과를 테스트할 모듈에 넘겨주는 역할을 한다.



ISO/IEC 9126의 소프트웨어 품질 특성 중 기능성(Functionality)의 하위 특성으로 옳지 않은 것은?
기능성 : 적합성, 정확성, 상호 운용성, 보안성, 준수성
신뢰성 : 성숙성, 결함허용성, 복구성
사용성 : 이해성, 학습성, 운용성, 준수성
효율성 : 시간반응성, 자원효율성, 준수성
유지보수성 : 분석성, 변경성, 안정성, 시험성, 준수성
이식성 : 적응성, 설치성, 공존성, 대체성, 준수성

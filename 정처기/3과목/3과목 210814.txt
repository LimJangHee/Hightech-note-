2. 
뷰(View) : 하나 이상의 기본 테이블로부터 유도되어 만들어지는 가상 테이블 / ③ 튜플 : 관계데이터 구조 테이블에서 행을 의미한다. / ④ 카디널리지 : 튜플의 갯수를 의미한다.

4.
물리적데이터베이스 설계는 논리적 설계에 기반하여 설계한다.
1. 물리적 설계의 목적은 효율적인 방법으로 데이터를 저장 하는 것이다 ==> 당연히 효율적으로 하기 위함
2. 트랜잭션 처리량과 응당시간, 디스크 용량 등을 고려 ==> 물리적인 요소를 고려
3. 저장 레코드이 형식, 순서, 접근 경로와 같은 정보를 사용 ==> 물리적 요소
4. 트랜잭션의 인터페이스를 설계 ==> 이것은 논리적 설계에서 인터페이스를 사용자의 입장에서 편리하도록 설계 하는 것임

6.
HAVING 절 : GROUP BY와 함께 사용되며, 그룹에 대한 조건을 지정한다.

12.
관계대수 : 관계형 데이터베이스에서 원하는 정보와 그 정보를 검색하기 위해서 어떻게 유도하는가를 기술하는 <절차적인 언어>이다.

15.
정규화 : 논리적 설계 단계에서 진행
정규화 : 필요한 데이터만 모아서 나누는것
비정규화 : 나눠져있는 데이터를 필요에 의해서 다시 합치는 것

16.
Atomicity(원자성)
1. 트랜잭션의 연산은 데이터베이스에 모두 반영되든지 아니면 전혀 반영되지 않아야 한다.
2. 트랜잭션 내의 모든 명령은 반드시 완벽히 수행되어야 하며, 모두가 완벽히 수행되지 않고 어느하나라도 오류가 발생하면 트랜잭션 전부가 취소되어야 한다.

Consistency(일관성)
1. 트랜잭션이 그 실행을 성공적으로 완료하면 언제나 일관성 있는 데이터베이스 상태로 변환한다.
2. 시스템이 가지고 있는 고정요소는 트랜잭션 수행 전과 트랜잭션 수행 완료 후의 상태가 같아야 한다.

Isolation(독립성,격리성)
1. 둘 이상의 트랜잭션이 동시에 병행 실행되는 경우 어느 하나의 트랜잭션 실행중에 다른 트랜잭션의 연산이 끼어들 수 없다.
2. 수행중인 트랜잭션은 완전히 완료될 때까지 다른 트랜잭션에서 수행 결과를 참조할 수 없다.

Durablility(영속성,지속성)
1. 성공적으로 완료된 트랜잭션의 결과는 시스템이 고장나더라도 영구적으로 반영되어야 한다.

18.
로킹기법 : 같은 자원을 엑세스하는 다중 트랜잭션 환경에서 DB의 일관성과 무결성을 유지하기 위해 트랜젝션의 순차적 진행을 보장하는 직렬화 기법.
타임스탬프 기법 : 트랜젝션과 트랜잭션이 읽거나 갱신한 데이터에 대해 트랜잭션이 실행을 시작하기 전에 타임스탬프를 부여하여 부여된 시간에 따라 트랜젝션 작업을 수행하여 트랜잭션 간의 처리순서를 미리 정하는 기법

19.
X → Y : Y는 X에 함수 종속, x라는 속성을 알면 y라는 속성을 알 수 있다

1. 릴레이션 R의 모든 결정자(determinant)가 후보키이면 그 릴레이션 R은 어떤 정규형에 속하는가?
1NF : 도메인이 <원자값만으로> 구성된 정규형
2NF : 기본 키가 아닌 모든 속성이 기본 키에 대해 <완전 함수적 종속>을 만족하는 정규형
3NF : 기본 키가 아닌 모든 속성이 기본 키에 대해 <이행적 종속>을 만족 안하는 정규형
BCNF : <모든 결정자가 후보 키인 정규형 *>
4NF : 다치 종속 A->B가 성립하는 경우 A에 <함수적 종속 관계를 만족하는 정규형>
5NF : 모든 <조인 종속>이 후보 키를 통해서만 성립되는 정규형

2.
relation : 테이블의 수
attribute : 열의 수
tuple : 행의 수

3.
Commit과 Rollback이 나오면 원자성(Atomicity) 국룰이라고 보시면됩니다.

7.
Null → 개체 무결성 국룰

8.
뷰는 하나이상의 테이블로부터 유도되는 가상테이블이며 논리적 독립성이 제공됩니다.
실제테이블처럼 권한을 나눌 수 있습니다.

따라서 특정사용자가 볼 필요가 없는 다른열들을 배제하고 뷰를 만든 후 해당 사용자에게 뷰에대한 권한을 할당하면 테이블 전체에 대한 권한을 부여하지 않아도 됩니다.

뷰는 자체적으로 인덱스를 가지지 않습니다. 따라서 삽입 삭제 수정이 제한적인 것입니다.

9.
분산데이터베이스는 6가지 투명성(Transparency)을 만족해야 한다.

1. 분할 투명성 : 하나의 논리적 Relation이 여러 단편으로 분할되어 각 단편의 사본이 여러 site에 저장
2. 위치 투명성 : 사용하려는 데이터의 저장 장소 명시 불필요. 위치정보가 시스템 카탈로그에 유지되어야 함
3. 지역사상 투명성 : 지역DBMS와 물리적 DB사이의 Mapping 보장. 각 지역시스템 이름과 무관한 이름 사용 가능
4. 중복 투명성 : DB 객체가 여러 site에 중복 되어 있는지 알 필요가 없는 성질
5. 장애 투명성 : 구성요소(DBMS 등)의 장애에 무관한 트랜잭션의 원자성 유지
6. 병행 투명성 : 다수 트랜잭션 동시 수행시 결과의 일관성 유지, Time Stamp, 2PL 구현

10. 정규화 목적
- 어떠한 릴레이션이라도 데이터베이스 내에서 표현 가능하게 만든다.
- 데이터 삽입시 릴레이션을 재구성할 필요성을 줄인다.
- 효과적인 검색 알고리즘을 생성할 수 있다.
- 중복을 배제하여 삽입, 삭제, 갱신 이상의 발생을 야기한다. -> 중복을 배제하여 삽입, 삭제, 갱신 이상들을 제거하기 위하여 정규화를 합니다.

14.
데이터베이스 로그(log)를 필요로 하는 회복 기법은?
-> 즉각 갱신 기법

17.
관계대수의 순수관계 연산자가 아닌 것은?
순수 관계 연산자 : select / project / join / division

19.
릴레이션 조작 시 데이터들이 불필요하게 중복되어 예기치 않게 발생하는 곤란한 현상을 의미하는 것은?
Anomaly(이상) = 릴레이션 조작 시 데이터들이 불필요하게 중복되어 예기치 않게 발생하는 곤란한 현상
cardinality (카디널리티) - 튜플의 갯수

20.
릴레이션 특징
똑같은 튜플 포함안됨
튜플사이 순서 없음
속성간 순서 중요x
속성의 명칭은 유일 구성값은 동일값 가능
속성 값은 원자값

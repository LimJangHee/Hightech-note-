1. XP(eXtreme Programming)의 기본원리로 볼 수 없는 것은?
Pair Programming=모든 프로그래밍은 하나의 컴퓨터에 2명의 프로그래머가 같이 공동작업 진행
Collective Ownership=Collective Code Ownership=소스코드에 대한 팀의 공통책임이자 코드는 누구든지 수정가능함
Continuous Integration=컴포넌트 또는 모듈 단위로 나누어서 개발된 소스코드들은 하나의 작업이 끝날 때 마다 지속적으로 통합되고 동시에 테스트함
오답 : Linear Sequential Method

2. 럼바우(Rumbaugh) 객체지향 분석 기법에서 동적 모델링에 활용되는 다이어그램은?
상태 다이어그램(State Diagram)	

3. CASE(Computer Aided Software Engineering)의 주요 기능으로 옳지 않은 것은?
S/W 라이프 사이클 전 단계의 연결
그래픽 지원     	
다양한 소프트웨어 개발 모형 지원
오답 : 언어번역

5. 인터페이스 분리 원칙
- 클라이언트는 자신이 사용하지 않는 메서드와 의존관계를 맺으면 안 된다.
- 클라이언트가 사용하지 않는 인터페이스 때문에 영향을 받아서는 안 된다.

6. 파이프 필터 형태의 소프트웨어 아키텍처에 대한 설명으로 옳은 것은?
-> 서브시스템이 입력데이터를 받아 처리하고 결과를 다음 서브시스템으로 넘겨주는 과정을 반복한다.

7. 코드화 대상 항목의 중량, 면적, 용량 등의 물리적 수치를 이용하여 만든 코드는?
-> 표의 숫자 코드

8. 디자인 패턴 사용의 장٠단점에 대한 설명으로 거리가 먼 것은?
-> 절차형이 아닌 객체형 언어와 함께 사용

9. DFD(data flow diagram)에 대한 설명으로 틀린 것은?
-> 시간 흐름을 표현할 수는 없음

10. 그래픽 표기법을 이용하여 소프트웨어 구성 요소를 모델링하는 럼바우 분석 기법에 포함되지 않는 것은?
객기동
객체 모델링, 기능 모델링, 동적 모델링

11. UML의 기본 구성요소가 아닌 것은?
띵다리 -> things, diagram, relationship

12. 소프트웨어의 상위설계에 속하지 않는 것은? 오답 : 모듈 설계
상위 설계 : 아키텍처 설계, 데이터 설계, 시스템 분할, 인터페이스 정의, 사용자 인터페이스 설계(UI 설계)
하위 설계 : 모듈 설계, 인터페이스 작성

13. [] : 선택

14. 소프트웨어의 사용자 인터페이스개발시스템(User Interface Development System)이 가져야 할 기능이 아닌 것은?
- 사용자 입력의 검증     	
- 에러 처리와 에러 메시지 처리     	
- 도움과 프롬프트(prompt) 제공
오답 : 소스 코드 분석 및 오류 복구 -> back-end 컴파일러 역활


15. 요구 사항 명세기법에 대한 설명으로 틀린 것은?
정형 명세법
- 수학적 기반/모델링 기반
- Z, VDM, Petri-Net(모형기반)
- CSP, CCS, LOTOS(대수적방법)
- 시스템 요구특성이 정확하고 명세가 간결하다. 명세와 구현이 일치.
- 그러나 이해도가 낮으며 이해관계자의 작성 부담 가중.

비정형명세
- 상태, 기능, 객체 중심 명세법
- FSM(Finite state machine)
- Decision Table, ER모델링
- State chart(SADT)
- UseCase : 사용자기반모델링
- 명세 작성이 간편하고 의사전달 방법이 다양하다.
- 불충분한 명세가능성, 모호성.

17.
애자일 방법론에는 익스트림 프로그래밍(Extreme Programing, XP), 스크럼(Scrum), 
익스트림 모델링, 크리스털 패밀리 , 기능 중심 개발(FDD, Feature-Driven Development) 이 있다.
오답 : 모듈중심 개발

19. 
GoF(Gangs of Four) 디자인 패턴 분류 -> 생구행
1. 생성 패턴
2. 구조 패턴
3. 행위 패턴

20.
모듈 간의 결합도가 약할 수록 좋다.
* 반대로 응집도는 강할 수록 좋다.
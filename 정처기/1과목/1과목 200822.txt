1. 요구사항 개발 프로세스 : 도출 → 분석 → 명세 → 확인

2. 
객체를 생성하기 위한 인터페이스를 정의하여 어떤 클래스가 인스턴스화 될 것인지는
서브클래스가 결정하도록 하는 것
virtuel-constructor 패턴이라고도 함
-> Factory Method 패턴

Visitor(방문자) 패턴 <행위 패턴>
  - 각 클래스들의 데이터 구조에서 처리 기능을 분리하여 별도의 클래스로 구성함.
    분리된 처리 기능은 각 클래스를 방문하여 수행

Observer 패턴 <행위 패턴>
  - 한 객체의 상태가 변화하면 객체에 상속되어 있는 다른 객체들에게 변화된 상태를 전달.
    분산된 시스템 간에 이벤트 생성, 발행(Publish), 이를 수신(Subscribe)해야할 때 이용함

Bridge 패턴 <구조 패턴>
   - 구현부에서 추상층을 분리, 서로가 독립적으로 확장함
     기능과 구현을 두 개의 별도 클래스로 구현함

3. 
럼바우 객체 지향 분석과 거리가 먼 것은? -> 정적 아님
객체 모델, 동적 모델, 기능 모델

4. 애자일 기법에 대한 설명으로 맞지 않은 것은?
1. 프로세스와 도구보다는 개인과의 상호작용에 더 가치를 둠
2. 방대한 문서보다는 실행되는 SW에 더 가치를 둠
3. 계약 협상보다는 고객과의 협업에 더 가치를 둠
4. 계획을 따르기 보다는 변화에 반응하는 것에 더 가치를 둠

5. 미들웨어 솔루션의 유형에 포함되지 않는 것은? -> <web server는 아님>
WAS(웹 애플리케이션 서버)
  - 사용자의 요구에 따라 변하는 동적인 콘텐츠를 처리함
  - 웹 환경을 구현하기 위한 미들웨어
RPC(Remot Procedure Call)
   - 응용 프로그램이 프로시저를 사용하여 원격 프로시저를 마치 로컬 프로시저처럼 호출하는 미들웨어
ORB(Object Request Broker)
   - 객체 지향 미들웨어로 코바(CORBA) 표준 스펙을 구현함
   - 최근에는 TP-Monitor의 장점인 트랜잭션 처리와 모니터링 등을 추가로 구현한 제품도 있음

6. UML에서 시퀀스 다이어그램의 구성 항목에 해당하지 않는 것은?
액터, 객체(object), 라이프라인(생명선), 메세지, 실행 상자
오답 : 확장

7. 객체지향에서 정보 은닉과 가장 밀접한 관계가 있는 것은?
-> Encapsulation

8. 디자인 패턴 중에서 행위적 패턴에 속하지 않는 것은? -> <프로토타입 아님>
<행위적 패턴(Behavioral Pattern)>
1. 책임 연쇄(Chain of Responsibility)
2. 커맨드 (Command)
3. 인터프리터(Interpreter)
4. 반복자(Iterator)
5. 중재자(Mediator)
6. 메멘토(Memento)
7. 옵서버(Observer)
8. 상태(State)
9. 전략(Strategy)
10. 템플릿 메소드(template Method)
11. 방문자(Visitor)

11.컴포넌트 설계시 <협약(Contract)>에 의한 설계를 따를 경우
- 컴포넌트의 오퍼레이션 사용 전에 참이 되어야 할 선행조건
- 사용 후 만족되어야 할 결과조건
- 오퍼레이션이 실행되는 동안 항상 만족되어야 할 불변조건 등이 포함되어야 한다.

12. UML에서 활용되는 다이어그램 중, 시스템의 동작을 표현하는 행위(Behavioral) 다이어그램에 해당하지 않는 것은?
< 행위(Behavioral) 다이어그램 >
1. 유스케이스(UseCase) 다이어그램
2. 시퀀스(Sequence) 다이어그램
3. 커뮤니케이션(Communication) 다이어그램
4. 상태(State) 다이어그램
5. 활동(Activity) 다이어그램
6. 상호작용 개요(Interaction Overview) 다이어그램
7. 타이밍(Timing) 다이어그램

오답 : 배치(Deployment) 다이어그램은 구조적(Structural) 다이어그램이다.

14. 빈 화살표로 연결 : 일반화 관계

20. 동료검토 : 요구 사항 명세서 작성자가 요구 사항 명세서를 설명하고 이해관계자들이 설명을 들으면서 결함을 발견
예외처리 : 예외가 발생했을시 소프트웨어가 갑작스럽게 종료하지 않도록 보조장치로서 사용

Throwable - Exception : 컴파일 시점의 예외(예외처리 가능)
	  - Error : 시스템상의 오류(예외처리랑 관련 X)


예외처리 키워드
- try catch finally : 직접 처리 할때
- throws : 간접처리 
- throw : 사용자 정의 예외처리

<try, catch, finally>
try catch : 예외가 발생했을시 소프트웨어가 멈추지 않고 그 다음을 실행할 수 있도록 안정장치
try{ 예외가 발생할 것 같은 코드 }
catch{ 예외가 발생하면 그 예외를 처리하는 코드 }
finally{ 예외 발생과 상관없이 무조건 실행하려는 코드 }

-> try구문 진입 -> 예외 발생 -> catch에서 일치하는 예외처리(이때 try구문에서 예외 발생 이후의 코드들은 실행하지 않음) -> finally진입 
-> try구문 진입 -> 예외 없음(try구문의 모든 코드들을 실행) -> finally 진입

<throws>
자신을 호출한 쪽으로 예외처리를 넘김
메소드가 많아서 일일히 예외처리를 해주기 힘들때 모아서 넘김으로 한번에 예외처리를 해줌
->호출하는 쪽에서 한번에 예외처리를 해주면 됨

<throw>
인위적으로 특정 시점에 예외를 발생 시킬 때 사용하는 키워드
Exception 클래스를 상속받아서 사용자 정의 class를 생성해서 사용하면 됨
public class UserException extends Exception{}